plugins {
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'maven-publish'
}

version = '1.3'
group = 'com.example.loginsystem'
archivesBaseName = 'loginsystem'

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(17)) // ÿßÿ≥ÿ™ÿÆÿØŸÖ Java 17 ŸÑŸÄ Forge 1.20+
}

minecraft {
    mappings channel: 'official', version: '1.20.1'
    runs {
        server {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            mods {
                loginsystem {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.20.1-47.3.33'
    
    // MySQL JDBC Driver - embedded in final JAR
    implementation 'mysql:mysql-connector-java:8.0.33'
    
    // MariaDB JDBC Driver - embedded in final JAR (backup)
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.1.4'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

jar {
    manifest {
        attributes([
            'Specification-Title': project.name,
            'Specification-Vendor': 'LoginSystem',
            'Specification-Version': project.version,
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Implementation-Vendor': 'LoginSystem',
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'FMLModType': 'GAMELIBRARY'
        ])
    }
    
    // ÿØŸÖÿ¨ JDBC drivers ŸÅŸä JAR
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('.jar') && 
            (it.name.contains('mysql-connector') || it.name.contains('mariadb')) 
        }.collect { zipTree(it) }
    }
    
    // ÿ™ÿ≠ÿ≥ŸäŸÜ ÿ≠ÿ¨ŸÖ JAR ÿ®ÿ•ÿ≤ÿßŸÑÿ© ÿßŸÑŸÖŸÑŸÅÿßÿ™ ÿ∫Ÿäÿ± ÿßŸÑÿ∂ÿ±Ÿàÿ±Ÿäÿ©
    exclude '**/module-info.class'
    exclude '**/META-INF/maven/**'
    exclude '**/META-INF/gradle/**'
    exclude '**/META-INF/*.SF'
    exclude '**/META-INF/*.DSA'
    exclude '**/META-INF/*.RSA'
    exclude '**/META-INF/LICENSE*'
    exclude '**/META-INF/NOTICE*'
    exclude '**/*.md'
    exclude '**/*.txt'
    exclude '**/changelog*'
    
    // ÿ™ÿ¨ŸÜÿ® ÿ™ÿ∂ÿßÿ±ÿ® ÿßŸÑŸÖŸÑŸÅÿßÿ™
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    finalizedBy 'reobfJar'
}

// ŸÖŸáŸÖÿ© ŸÑŸÅÿ≠ÿµ ÿ≠ÿ¨ŸÖ JAR ÿßŸÑŸÜŸáÿßÿ¶Ÿä
task checkJarSize {
    doLast {
        def jarFile = file("build/libs/${archivesBaseName}-${version}.jar")
        if (jarFile.exists()) {
            def sizeInMB = jarFile.length() / (1024 * 1024)
            println "üì¶ JAR Size: ${String.format('%.2f', sizeInMB)} MB"
            if (sizeInMB > 5) {
                println "‚ö†Ô∏è  Warning: JAR size exceeds 5MB limit!"
            } else {
                println "‚úÖ JAR size is within 5MB limit"
            }
        }
    }
}

build.finalizedBy checkJarSize

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            groupId = project.group
            artifactId = archivesBaseName
            version = project.version
        }
    }
}
